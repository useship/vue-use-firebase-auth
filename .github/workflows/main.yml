name: CI
on: ["push", "pull_request"]

jobs:
  # No tests written (yet!)
  # test:
  #   name: Test on Node ${{ matrix.node }} and ${{ matrix.os }}

  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       node: ['10.x', '12.x', '14.x']
  #       # os: [ubuntu-latest, windows-latest, macOS-latest]
  #       os: [ubuntu-latest]

  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v2

  #     - name: Use Node ${{ matrix.node }}
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ matrix.node }}

  #     ## Yarn dir
  #     - name: Get yarn cache directory path
  #       id: yarn-cache-dir-path
  #       run: echo "::set-output name=dir::$(yarn cache dir)"

  #     ## Cache
  #     - name: Cache yarn cache
  #       uses: actions/cache@v2
  #       id: cache-yarn-cache2
  #       with:
  #         path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
  #         key: ${{ runner.os }}-yarn2-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-yarn2-

  #     ## Cache
  #     - name: Cache node_modules
  #       id: cache-node-modules2
  #       uses: actions/cache@v2
  #       with:
  #         path: node_modules
  #         key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules2-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-${{ matrix.node-version }}-nodemodules2-

  #     ## Dependencies
  #     - name: Install dependencies
  #       if: |
  #         steps.cache-yarn-cache.outputs.cache-hit != 'true' ||
  #         steps.cache-node-modules.outputs.cache-hit != 'true'
  #       run: yarn --frozen-lockfile

  #     - name: Test
  #       run: yarn test

  lint:
    name: Lint  
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      ## Yarn dir
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      ## Cache
      - name: Cache yarn cache
        uses: actions/cache@v2
        id: cache-yarn-cache2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn2-

      ## Cache
      - name: Cache node_modules
        id: cache-node-modules2
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules2-

      ## Dependencies
      - name: Install dependencies
        if: |
          steps.cache-yarn-cache.outputs.cache-hit != 'true' ||
          steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      ## Lint
      - name: Lint
        run: yarn lint

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      ## Yarn dir
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      ## Cache
      - name: Cache yarn cache
        uses: actions/cache@v2
        id: cache-yarn-cache2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn2-

      ## Cache
      - name: Cache node_modules
        id: cache-node-modules2
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules2-

      ## Dependencies
      - name: Install dependencies
        if: |
          steps.cache-yarn-cache.outputs.cache-hit != 'true' ||
          steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      ## Build
      - name: Build
        run: yarn build

      ## Upload artifacts
      - uses: actions/upload-artifact@v2
        name: Store dist folder to artifacts
        with:
          name: dist
          path: dist/ # or path/to/artifact

  release:
    runs-on: ubuntu-latest
    name: Release version to npm registry
    needs: [lint, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        name: Load dist folder from artifacts
        with:
          name: dist
          path: dist

      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      ## Yarn dir
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      ## Cache
      - name: Cache yarn cache
        uses: actions/cache@v2
        id: cache-yarn-cache2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn2-

      ## Cache
      - name: Cache node_modules
        id: cache-node-modules2
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules2-

      ## Dependencies
      - name: Install dependencies
        if: |
          steps.cache-yarn-cache.outputs.cache-hit != 'true' ||
          steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: yarn semantic-release
